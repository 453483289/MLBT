// Copyright 2013 Conix Security, Adrien Chevalier
// adrien.chevalier@conix.fr
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
#include "bootkit_tool.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Writes generic DOS MBR code to disk.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD restore_dos_mbr_vmdk_file(char* vmdk_path)
{
	return restore_dos_mbr(vmdk_path,0x510000);
}
DWORD restore_dos_mbr_device(char* device_name)
{
	return restore_dos_mbr(device_name,0);
}
DWORD restore_dos_mbr(char* device, DWORD mbr_offset)
{
	BYTE dos_mbr[]={
		0x33, 0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x7c, 0xfb, 0x50, 0x07, 0x50, 0x1f, 0xfc, 0xbe, 0x1b, 0x7c,
		0xbf, 0x1b, 0x06, 0x50, 0x57, 0xb9, 0xe5, 0x01, 0xf3, 0xa4, 0xcb, 0xbd, 0xbe, 0x07, 0xb1, 0x04,
		0x38, 0x6e, 0x00, 0x7c, 0x09, 0x75, 0x13, 0x83, 0xc5, 0x10, 0xe2, 0xf4, 0xcd, 0x18, 0x8b, 0xf5,
		0x83, 0xc6, 0x10, 0x49, 0x74, 0x19, 0x38, 0x2c, 0x74, 0xf6, 0xa0, 0xb5, 0x07, 0xb4, 0x07, 0x8b,
		0xf0, 0xac, 0x3c, 0x00, 0x74, 0xfc, 0xbb, 0x07, 0x00, 0xb4, 0x0e, 0xcd, 0x10, 0xeb, 0xf2, 0x88,
		0x4e, 0x10, 0xe8, 0x46, 0x00, 0x73, 0x2a, 0xfe, 0x46, 0x10, 0x80, 0x7e, 0x04, 0x0b, 0x74, 0x0b,
		0x80, 0x7e, 0x04, 0x0c, 0x74, 0x05, 0xa0, 0xb6, 0x07, 0x75, 0xd2, 0x80, 0x46, 0x02, 0x06, 0x83,
		0x46, 0x08, 0x06, 0x83, 0x56, 0x0a, 0x00, 0xe8, 0x21, 0x00, 0x73, 0x05, 0xa0, 0xb6, 0x07, 0xeb,
		0xbc, 0x81, 0x3e, 0xfe, 0x7d, 0x55, 0xaa, 0x74, 0x0b, 0x80, 0x7e, 0x10, 0x00, 0x74, 0xc8, 0xa0,
		0xb7, 0x07, 0xeb, 0xa9, 0x8b, 0xfc, 0x1e, 0x57, 0x8b, 0xf5, 0xcb, 0xbf, 0x05, 0x00, 0x8a, 0x56,
		0x00, 0xb4, 0x08, 0xcd, 0x13, 0x72, 0x23, 0x8a, 0xc1, 0x24, 0x3f, 0x98, 0x8a, 0xde, 0x8a, 0xfc,
		0x43, 0xf7, 0xe3, 0x8b, 0xd1, 0x86, 0xd6, 0xb1, 0x06, 0xd2, 0xee, 0x42, 0xf7, 0xe2, 0x39, 0x56,
		0x0a, 0x77, 0x23, 0x72, 0x05, 0x39, 0x46, 0x08, 0x73, 0x1c, 0xb8, 0x01, 0x02, 0xbb, 0x00, 0x7c,
		0x8b, 0x4e, 0x02, 0x8b, 0x56, 0x00, 0xcd, 0x13, 0x73, 0x51, 0x4f, 0x74, 0x4e, 0x32, 0xe4, 0x8a,
		0x56, 0x00, 0xcd, 0x13, 0xeb, 0xe4, 0x8a, 0x56, 0x00, 0x60, 0xbb, 0xaa, 0x55, 0xb4, 0x41, 0xcd,
		0x13, 0x72, 0x36, 0x81, 0xfb, 0x55, 0xaa, 0x75, 0x30, 0xf6, 0xc1, 0x01, 0x74, 0x2b, 0x61, 0x60,
		0x6a, 0x00, 0x6a, 0x00, 0xff, 0x76, 0x0a, 0xff, 0x76, 0x08, 0x6a, 0x00, 0x68, 0x00, 0x7c, 0x6a,
		0x01, 0x6a, 0x10, 0xb4, 0x42, 0x8b, 0xf4, 0xcd, 0x13, 0x61, 0x61, 0x73, 0x0e, 0x4f, 0x74, 0x0b,
		0x32, 0xe4, 0x8a, 0x56, 0x00, 0xcd, 0x13, 0xeb, 0xd6, 0x61, 0xf9, 0xc3, 0x54, 0x61, 0x62, 0x6c,
		0x65, 0x20, 0x64, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e,
		0x6f, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x65, 0x00, 0x45, 0x72, 0x72, 0x65, 0x75, 0x72,
		0x20, 0x6c, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x75, 0x20, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x6d,
		0x65, 0x6e, 0x74, 0x20, 0x64, 0x75, 0x20, 0x73, 0x79, 0x73, 0x74, 0x8a, 0x6d, 0x65, 0x20, 0x64,
		0x27, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x74, 0x69, 0x00, 0x53, 0x79, 0x73, 0x74,
		0x8a, 0x6d, 0x65, 0x20, 0x64, 0x27, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x74, 0x69,
		0x6f, 0x6e, 0x20, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x4a, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
	};
	HANDLE hPD;
	DWORD len;
	PBYTE originalMbr;

	printf("[-] Reading partition table\n");
	hPD = CreateFileA(device,GENERIC_READ,0,NULL,OPEN_EXISTING,0,NULL);
	if(hPD == NULL || hPD == INVALID_HANDLE_VALUE)
	{
		printf("[!] Can't open %s (read)\n",device);
		return -1;
	}

	if(mbr_offset != 0)
	{
		if(SetFilePointer(hPD,mbr_offset,NULL,FILE_BEGIN) != mbr_offset)
		{
			printf("[!] Can't go to offset 0x%x\n",mbr_offset);
			CloseHandle(hPD);
			return -1;
		}
	}

	originalMbr=(PBYTE)malloc(bytes_per_sector);
	if(!ReadFile(hPD, originalMbr, bytes_per_sector, &len, NULL))
	{
		printf("[!] Can't read sector at offset 0x%x\n",mbr_offset);
		free(originalMbr);
		CloseHandle(hPD);
		return -1;
	}
	CloseHandle(hPD);

	// patch DOS mbr code with partition table
	memcpy((PVOID)((DWORD)dos_mbr+0x1b8),(PVOID)((DWORD)originalMbr+0x1b8),0x48);
	free(originalMbr);

	printf("[-] Writing DOS MBR\n");
	hPD = CreateFileA(device,GENERIC_WRITE,0,NULL,OPEN_EXISTING,0,NULL);
	if(hPD == NULL || hPD == INVALID_HANDLE_VALUE)
	{
		printf("[!] Can't open %s (write)\n",device);
		CloseHandle(hPD);
		return -1;
	}
	if(SetFilePointer(hPD,mbr_offset,NULL,FILE_BEGIN) != mbr_offset)
	{
		printf("[!] Can't go to offset 0x%x (write)\n",mbr_offset);
		CloseHandle(hPD);
		return -1;
	}
	if(!WriteFile(hPD,dos_mbr,bytes_per_sector,&len,NULL))
	{
		printf("[!] Can't write sector at offset 0x%x\n",mbr_offset);
		CloseHandle(hPD);
		return -1;
	}

	printf("[-] Finished\n");
	CloseHandle(hPD);
	return 0;
}
