// Copyright 2013 Conix Security, Adrien Chevalier
// adrien.chevalier@conix.fr
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
#ifndef BOOTKIT_H
#define BOOTKIT_H

#include <windows.h>
#include <stdlib.h>
#include <stdio.h>

#define MBR_BOOTLOADER_AREA_SIZE		0x1b8

#define BYTES_PER_SECTOR			0x200
#define BOOTLOADER_SIZE				0x28
#define CUSTOM_BOOTLOADER_SIZE			0x3e

#define BOOTKIT_START_SIZE			0x03
#define BOOTKIT_SKIP_SIZE			0x0C
#define BOOTKIT_END_SIZE			0x3D

DWORD bytes_per_sector;
DWORD sectors_per_track;
DWORD tracks_per_cylinder;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Displays help
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void help();

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Wipe sectors starting from sector #2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD wipe_device_sectors(char* device_name, DWORD count);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Installs ASCII art payload which displays message contained into the "bootkit_template_path"
//	file at boot along with MBR (loads and exec. ASCII art payload).
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD write_ascii_art_mbr(char* device, BOOL simulation, char* bootkit_template_path);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Installs custom payload along with MBR (loads and exec. payload at 0000:0800)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD install_raw_shellcode(char* path, char* device_name, BOOL simulation);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Reads 1st sector (MBR + part table) and writes it into "backup" file.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD backup_mbr_device(char* backup, char* device_name);
DWORD backup_mbr_vmdk_file(char* backup, char* device_name);
DWORD backup_mbr(char* backup, char* device, DWORD mbr_offset);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Writes "backup" 1st sector (MBR + part table) to disk.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD write_mbr_vmdk_file(char* backup, char* device_name);
DWORD write_from_saved_mbr_device(char* backup, char* device_name);
DWORD write_mbr(char* backup, char* device, DWORD mbr_offset);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Restores MBR from backup file (created while patching).
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD restore_from_saved_mbr_device(char* backup, char* device_name, BOOL write_partition_table, BOOL wipe_bootkit);
DWORD restore_from_saved_mbr_vmdk_file(char* backup, char* vmdk_path, BOOL write_partition_table, BOOL wipe_bootkit);
DWORD restore_from_saved_mbr(char* backup, char* device, DWORD mbr_offset, BOOL write_partition_table, BOOL wipe_bootkit);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Parses partition table to find code cave.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD get_first_sector_offset_from_first_sector(PBYTE first_sector);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Reads device info (bytes per sector, etc.).
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD read_device_information(char* device);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Reads sectors.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD read_sectors_vmdk_file(int start, int nbSectors, char* vmdk_file);
DWORD read_sectors_device(int start, int nbSectors, char* device);
DWORD read_sectors(int start, int nbSectors, char* device, DWORD mbr_offset);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		List devices.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD enumerate_drives();

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description :
//		Writes generic DOS MBR code to disk.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD restore_dos_mbr(char* device, DWORD mbr_offset);
DWORD restore_dos_mbr_vmdk_file(char* path);
DWORD restore_dos_mbr_device(char* device_name);


#endif
